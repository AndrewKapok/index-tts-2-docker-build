name: Build and Push IndexTTS 2 Docker Image

on:
  # 自动触发条件
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  # 手动触发
  workflow_dispatch:
    inputs:
      version:
        description: 'Docker image version tag'
        required: true
        default: 'latest'
      push_to_registry:
        description: 'Push to GitHub Container Registry'
        type: boolean
        default: true

env:
  IMAGE_NAME: index-tts-2-docker-build
  REGISTRY_NAMESPACE: andrewkapok

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Maximize build disk space
      uses: easimon/maximize-build-space@v10
      with:
        root-reserve-mb: 4096  # 仅保留 4GB 根分区空间（极限压缩）
        swap-size-mb: 8192     # 分配 8GB 交换空间（应对内存不足）
        remove-dotnet: true
        remove-android: true
        remove-haskell: true
        remove-codeql: true
        remove-docker-images: true  # 删除所有预装 Docker 镜像（节省 5-10GB）
        remove-ghcli: true
        remove-go: true
        remove-java: true
        remove-node: true
        remove-python: false   # 保留 Python（你的场景需要）
        remove-ruby: true
        remove-php: true
        remove-amazon-ssm-agent: true
        remove-azure-cli: true
        remove-google-cloud-sdk: true
        remove-mysql: true
        remove-postgresql: true
        remove-vcpkg: true
        remove-cmake: true
        remove-mono: true
        remove-docker-compose: true
        remove-mongodb: true
        remove-nginx: true
        remove-apache: true
        cleanup-home: true     # 清理用户目录缓存
        mount-tmpfs: true
        extra-remove: |
          /usr/share/doc 
          /usr/share/man 
          /var/lib/apt/lists 
          /var/log 
          /var/cache/apt/archives 
          /usr/local/lib/node_modules  # 彻底删除 Node 相关残留
          /var/lib/snapd

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true  # 启用Git LFS支持

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      if: github.event_name == 'workflow_dispatch' && inputs.push_to_registry || github.event_name != 'workflow_dispatch'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
        # 手动触发时使用输入的版本号
        labels: |
          org.opencontainers.image.title=IndexTTS-2
          org.opencontainers.image.description="IndexTTS 2 Text-to-Speech System"
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${{ github.event.inputs.version || 'latest' }}

    - name: Configure Git and clone IndexTTS
      run: |
        # 配置Git使用镜像加速
        git lfs install
        
        # 克隆IndexTTS主仓库
        echo "Cloning IndexTTS repository..."
        git clone https://github.com/index-tts/index-tts.git index-tts-repo
        cd index-tts-repo
        
        # 拉取LFS文件（模型等大文件）
        echo "Pulling LFS files..."
        git lfs pull

    - name: Download models
      run: |
        cd index-tts-repo
        

        pip install -U uv 
        uv sync --extra webui
        uv tool install "huggingface-hub[cli,hf_xet]" 

        echo "Downloading IndexTTS-2 models..."
        uv run hf download IndexTeam/IndexTTS-2 --local-dir=checkpoints
        
    - name: Build Docker image
      run: |
        # 构建Docker镜像
        echo "Building Docker image..."
        docker buildx build \
          --platform linux/amd64 \
          --tag ghcr.io/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version || 'latest' }} \
          --tag ghcr.io/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest \
          --push \
          .

    - name: Push to GitHub Packages
      if: github.event_name == 'workflow_dispatch' && inputs.push_to_registry || github.event_name != 'workflow_dispatch'
      run: |
        echo "Image successfully pushed to GitHub Container Registry"
        echo "Image: ghcr.io/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version || 'latest' }}"
        echo "To use this image:"
        echo "docker run -p 7860:7860 ghcr.io/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version || 'latest' }}"
    
    - name: Upload Docker image as artifact
      if: github.event_name == 'workflow_dispatch' && !inputs.push_to_registry
      uses: actions/upload-artifact@v4
      with:
        name: index-tts2-docker-image
        path: |
          docker-image.tar
        retention-days: 1
